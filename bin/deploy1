#!/bin/bash

#deploys the Lambda@Edge functions

. ./bin/config

#switch to the API GW + Image Resize function region to fetch the Output variables
#from cloudformation stack

aws configure set default.region $deployment_region

aws cloudformation describe-stacks \
  --stack-name "${stack_name}" \
  --query Stacks[].Outputs \
  --output table

#read the S3 bucket ARN from Outputs field of first template deployed
s3_image_bucket_arn="$(aws cloudformation describe-stacks \
    --stack-name $stack_name \
    --output json \
    --query 'Stacks[].Outputs[?OutputKey==`ImageBucket`].OutputValue' --output text)"

s3_image_bucket_url="$(aws cloudformation describe-stacks \
    --stack-name $stack_name \
    --output json \
    --query 'Stacks[].Outputs[?OutputKey==`BucketWebsiteUrl`].OutputValue' --output text)"

apigw_url="$(aws cloudformation describe-stacks \
        --stack-name $stack_name \
        --output json \
        --query 'Stacks[].Outputs[?OutputKey==`APIGWUrl`].OutputValue' --output text)"

#creates the config.js file with bucket urls and packages into the function
#before deployment
echo "var config = module.exports = {image_bucket:\"$s3_image_bucket_arn\",\
apigw_url:\"$apigw_url\",image_bucket_url:\"$s3_image_bucket_url\"}" > config.js

zip -r ${PWD}/dist/origin-request-function.zip config.js

#switch to us-east-1 before deploying the Lambda@Edge functions
aws configure set default.region $edge_function_region

code_bucket_name="temp-code-imageresize-$(openssl rand -hex 8)"
#create temporary bucket for cloudformation deployment
aws s3 mb "s3://${code_bucket_name}"

aws cloudformation package \
  --output-template-file=deploy/output-edge-functions.yaml \
  --template-file=deploy/edge-functions.yaml \
  --s3-bucket="${code_bucket_name}" \

aws cloudformation deploy \
  --template-file=deploy/output-edge-functions.yaml \
  --stack-name="${stack_name_ef}" \
  --capabilities=CAPABILITY_NAMED_IAM

#delete the bucket
aws s3 rb --force "s3://${code_bucket_name}"

aws cloudformation describe-stacks \
  --stack-name "${stack_name_ef}" \
  --query Stacks[].Outputs \
  --output table
